from wicked_expressions:api import Data, Var, StaticVar, Int, Float, ExpressionNode
from ./config import Config

_WORKING_DIR = f"{Config.ROOT}/math"

pi = StaticVar(Float)

def random(value_min: int | ExpressionNode, value_max: int | ExpressionNode) -> ExpressionNode:
    min = StaticVar(Int)
    max = StaticVar(Int)
    size = StaticVar(Int)
    lcg = StaticVar(Int)
    temp = StaticVar(Int)
    output = Var(Int)

    lcg_a = 1630111353
    lcg_c = 1623164762
    lcg_m = 2147483647
    setup_path = f"{_WORKING_DIR}/random/setup"
    run_path = f"{_WORKING_DIR}/random/run"

    min = value_min
    max = value_max

    merge function_tag minecraft:load {"values": [setup_path]}
    function setup_path:
        if not lcg.exists():
            with lcg.store():
                seed

    execute function run_path:
        size = max - min + 1
        lcg = (lcg * lcg_a + lcg_c) % lcg_m
        temp = lcg / 8 % size + min

    output = temp
    return output

def pow(val: int | ExpressionNode, exp: int | ExpressionNode) -> ExpressionNode:
    value = StaticVar(Int)
    exponent = StaticVar(Int)
    temp = StaticVar(Int)
    output = Var(Int)

    run_path = f"{_WORKING_DIR}/pow/run"

    value = val
    exponent = exp

    execute function run_path:
        temp *= value
        exponent -= 1

        if exponent > 1:
            function run_path

    output = temp
    return output

def sqrt(val: int | ExpressionNode) -> ExpressionNode:
    a = StaticVar(Int)
    b = StaticVar(Int)
    value = StaticVar(Int)
    temp = StaticVar(Int)
    output = Var(Int)

    run_path = '{_WORKING_DIR}/sqrt/run'

    value = val

    if value >= 214748:
        tellraw @a [{"text":f"\n{Config.LIBRARY_NAME} ","color":"gray"},{"text":" ERROR 'sqrt()' overflow. Input value of ","color":"red"},{"score":{"name": value.holder, "objective": value.obj},"color":"red"},{"text":" is too large.","color":"red"}]
    if value < 0:
        tellraw @a [{"text":f"\n{Config.LIBRARY_NAME} ","color":"gray"},{"text":" ERROR 'sqrt()' received input value ","color":"red"},{"score":{"name": value.holder, "objective": value.obj},"color":"red"},{"text":". Negative input values not supported.","color":"red"}]

    b = value
    value *= 10000
    temp = 1255

    for _ in range(4):
        execute function run_path:
            a = value / temp
            temp += a
            temp /= 2

    if b >= 10000:
        function run_path
    if b >= 100000:
        function run_path

    if temp <= 0:
        temp *= -1

    output = temp
    return output

def sin(degrees_: int | float | ExpressionNode):
    degrees = StaticVar(Float)
    in_value = StaticVar(Int)
    temp = StaticVar(Int)
    temp2 = StaticVar(Int)
    output = Var(Float)

    degrees = degrees_
    in_value = degrees * 10
    temp2 = (in_value - 1800) % 1800 - 900
    temp2 *= temp2
    temp = (temp2 + 3240000) / 1000
    temp2 = (temp2 * -4 + 3240000) / temp

    temp = in_value % 3600
    if temp >= 1800:
        temp2 *= -1

    output = Data.cast(temp2 / 1000, 'float')
    return output

def cos(degrees_: int | float | ExpressionNode):
    degrees = StaticVar(Float)
    in_value = StaticVar(Int)
    input = StaticVar(Int)
    temp = StaticVar(Int)
    temp2 = StaticVar(Int)
    output = Var(Float)

    degrees = degrees_
    in_value = degrees * 10
    temp2 = (in_value - 900) % 1800 - 900
    temp2 *= temp2
    temp = (temp2 + 3240000) / 1000
    temp2 = (temp2 * -4 + 3240000) / temp

    temp = (in_value + 900) % 3600
    if temp >= 1800:
        temp2 *= -1

    output = Data.cast(temp2 / 1000, 'float')
    return output
