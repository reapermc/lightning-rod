from wicked_expressions:api import Var, StaticVar, qInt, qIntSource, copy_args, ExprOnly, qIntSource, ExpressionNode
from ./raw import raw
from ./config import Config
from ./utils import binary_progression

def get_xp_points() -> qIntSource:
    output = Var(qInt)

    with output.store():
        xp query @s points
    return output

def get_xp_level() -> qIntSource:
    output = Var(qInt)

    with output.store():
        xp query @s levels
    return output

@copy_args(amount=ExprOnly(StaticVar[qInt]))
def set_xp_points(amount: int | ExpressionNode):
    if not isinstance(amount, ExpressionNode):
        return raw(f"xp set @s {amount} points")
    set_xp_points(0)
    return _add_from_expression(amount, 'points')

@copy_args(amount=ExprOnly(StaticVar[qInt]))
def set_xp_level(amount: int | ExpressionNode):
    if not isinstance(amount, ExpressionNode):
        return raw(f"xp set @s {amount} levels")
    set_xp_level(0)
    return _add_from_expression(amount, 'levels')

@copy_args(amount=ExprOnly(StaticVar[qInt]))
def add_xp_points(amount: int | ExpressionNode):
    if not isinstance(amount, ExpressionNode):
        return raw(f"xp add @s {amount} points")
    return _add_from_expression(amount, 'points')

@copy_args(amount=ExprOnly(StaticVar[qInt]))
def add_xp_level(amount: int | ExpressionNode):
    if not isinstance(amount, ExpressionNode):
        return raw(f"xp add @s {amount} levels")
    return _add_from_expression(amount, 'levels')

@copy_args(bar_percent=ExprOnly(StaticVar[qInt]))
def set_xp_points_percent(bar_percent: int | ExpressionNode):
    STATIC_PATH = f"{Config.LOCAL_DIR}/xp/set_xp_points_percent"
    ONE_PERCENT_XP_AMOUNT = 778
    MAGIC_LEVEL = 8772                  # at this level, 778xp == 1% of bar
    previous_level = StaticVar(qInt)

    previous_level = get_xp_level()

    set_xp_level(MAGIC_LEVEL)

    if not isinstance(bar_percent, ExpressionNode):
        set_xp_points(ONE_PERCENT_XP_AMOUNT*bar_percent)
        set_xp_level(previous_level)
        return

    execute function STATIC_PATH:
        percent_left = bar_percent
        set_xp_points(0)

        for increment in binary_progression(7, reversed=True):
            if percent_left >= increment:
                xp_to_add = ONE_PERCENT_XP_AMOUNT * increment

                # this prevents bar overflow at 100%
                if increment == 64:
                    xp_to_add -= 1

                execute function ~/{increment}:
                    percent_left -= increment
                    xp add @s xp_to_add

        set_xp_level(previous_level)

@copy_args(amount=StaticVar[qInt])
def _add_from_expression(amount: ExpressionNode, mode: str):
    STATIC_PATH = f"{Config.LOCAL_DIR}/xp/add_xp_{mode}"

    execute function STATIC_PATH:
        for increment in binary_progression(28, reversed=True):
            if amount >= increment:
                execute function ~/{increment}:
                    raw(f"xp add @s {increment} {mode}")
                    amount -= increment

        # prevents the out of place levelup sound effect from playing
        stopsound @s player minecraft:entity.player.levelup
